	PROGRAM MISDAT
C
C  MISSILE DATCOM CODE CREATED BY S.R. VUKELICH, MCDONNELL DOUGLAS
C  ALL SUBROUTINES WRITTEN BY S.R. VUKELICH UNLESS OTHERWISE STATED
C  THIS ROUTINE MODIFIED BY B. HEATH, W. BLAKE, WL/FIGC 
C
C***  THE FOLLOWING CARDS ARE REQUIRED FOR CDC/CYBER
C
C     PROGRAM MISDAT(INPUT,OUTPUT,TAPE5=INPUT,TAPE6=OUTPUT,
C    1 TAPE8=100,TAPE2=100,TAPE3=100,TAPE4=100,TAPE7=100)
C
C   ***********************************************************
C   * THE USAF STABILITY AND CONTROL AUTOMATED MISSILE DATCOM *
C   ***********************************************************
C
C    *********************************************************
C    *********************************************************
C    **                                                     **
C    ** UNPUBLISHED COPYRIGHT (C) BY MCDONNELL DOUGLAS CORP **
C    **     ALL RIGHTS RESERVED UNDER THE COPYRIGHT ACT     **
C    **                                                     **
C    **    THIS MATERIAL MAY BE REPRODUCED BY OR FOR THE    **
C    **      U.S. GOVERNMENT PURSUANT TO THE COPYRIGHT      **
C    ** LICENSE UNDER THE CLAUSE AT DFARS 52.227-7013 1987  **
C    **                                                     **
C    *********************************************************
C    *********************************************************
C
C********************************************************************
C***              --- FORTRAN LANGUAGE CONVERSION ---             ***
C***  FOR FORTRAN IV TO FORTRAN V CONVERSIONS, THE FOLLOWING      ***
C***  ROUTINES MUST BE MODIFIED --                                ***
C***     MISDAT, CONERR, READIN, EXTRAP, SAVEF, AND READCD        ***
C***  THE CHANGE DEALS WITH END-OF-FILE CHECKS ON READ STATEMENTS ***
C********************************************************************
C***              --- SYSTEM REQUIREMENTS ---                     ***
C***  MISSILE DATCOM REQUIRES THE FOLLOWING SYSTEM CONFIGURATION  ***
C***     SEVEN SCRATCH I/O TAPE UNITS, NUMBERED 1 TO 9            ***
C***     VIRTUAL MEMORY OR CAPABILITIES FOR OVERLAY               ***
C***  PROGRAM CONSTANTS ARE SET IN THE BLOCK DATA ROUTINE         ***
C********************************************************************
C
C***  THIS ROUTINE IS THE TOP MOST LEVEL OF THE EXECUTIVE AND CONTROLS
C***  EXECUTION OF THE SYSTEM
C
C***  THE FOLOWING SETS UP THE NAMED BLOCK DATA
C
	EXTERNAL BLOCKD
	EXTERNAL CKDAT
C
C***  FOLLOWING ARE THE GLOBAL SYSTEM COMMON BLOCKS
C
	COMMON /ABODIN/ BDIN(881)
	COMMON /BDWORK/ BDW(241)
	COMMON /CASEID/ IDCASE(74),KOUNT,NAMSV(100),CASE,NOEXTR,NOLAT,
     1                IR,IPAGE
	COMMON /DBODY/  EBODY(406)
	COMMON /DB1/    EB1(400)
	COMMON /DB12/   EB12(400)
	COMMON /DB123/  EB123(400)
	COMMON /DB1234/ EB1234(400)
	COMMON /DESIG/  NNACA(80,4)
	COMMON /DDFIN1/  EFIN1(80)
	COMMON /DDFIN2/  EFIN2(80)
	COMMON /DDFIN3/  EFIN3(80)
	COMMON /DDFIN4/  EFIN4(80)
	COMMON /DFLAGS/ LDELF(12)
	COMMON /DUMPF/  LDUMPF(37)
	COMMON /FFINDL/ FFNDL(36)
	COMMON /FLC/    FLTC(144)
	COMMON /FSET1/  FDATA1(399)
	COMMON /FSET2/  FDATA2(399)
	COMMON /FSET3/  FDATA3(399)
	COMMON /FSET4/  FDATA4(399)
	COMMON /F1WORK/ F1WK(290)
	COMMON /F2WORK/ F2WK(290)
	COMMON /F3WORK/ F3WK(290)
	COMMON /F4WORK/ F4WK(290)
	COMMON /GEOBOD/ BDGEO(47)
	COMMON /GEOFC/  GFINC(21)
	COMMON /GEOFS1/ GFIN1(188)
	COMMON /GEOFS2/ GFIN2(188)
	COMMON /GEOFS3/ GFIN3(188)
	COMMON /GEOFS4/ GFIN4(188)
	COMMON /INC/    COREC(150)
	COMMON /INCID/  DELTAS(40)
	COMMON /INLETN/ INLTS(64)
	COMMON /INLTD/  DINLET(120)
	COMMON /LOGIC/  LFLAGS(28)
	COMMON /PAERO/  PAER(4024)
	COMMON /PARTF/  PARTS(19)
	COMMON /REFQN/  REFS(9)
	COMMON /SBODY/  CBODY(220)
	COMMON /SB1/    CB1(220)
	COMMON /SB12/   CB12(220)
	COMMON /SB123/  CB123(220)
	COMMON /SB1234/ CB1234(220)
	COMMON /SFIN1/  CFIN1(220)
	COMMON /SFIN2/  CFIN2(220)
	COMMON /SFIN3/  CFIN3(220)
	COMMON /SFIN4/  CFIN4(220)
	COMMON /TRIMD/  TTRIM(120)
	COMMON /TRIMIN/ DTRIM(19)
	COMMON /TOTALC/ ATOTAL(80)
	COMMON /THERY/  LSOSE,PRESUR,LHYBRD,LHYPER
        COMMON /XRBLNT/ BLNT(104)
C
	CHARACTER*4 IDCASE
C
C  MISSILE DATCOM WAS ORIGINALLY WRITTEN WITH A COMMON BLOCK
C  STRUCTURE WHICH REQUIRED MULTIPLE USAGE OF THE SAME COMMON
C  BLOCK TO CONSERVE CORE MEMORY REQUIREMENTS.  THE FOLLOWING
C  CALCULATIONS WERE INVOLVED:  VAN DYKE HYBRID METHOD, AIRFOIL
C  SECTION MODULE, CONFIGURATION TRIM, AND DYNAMIC DERIVATIVES.
C
C  ALL COMMON BLOCKS INVOLVED HAVE BEEN MODIFIED SO THAT EACH
C  COMMON BLOCK IS USED FOR ONLY ONE FUNCTION.  THE FOLLOWING
C  COMMON BLOCKS WERE CREATED AS A RESULT.
C
	COMMON /VDARY/ XB(220),RB(220),RBP(220),C(220),C1(220),RB1(220),
     1  RBP1(220),B(220),PSI(220),ZE0X(220),PSIR(220),PHIX(220)
	COMMON /VANVAR/ PHIR(220),ZE1(220),ZE1X(220),ZE1R(220),
     1  T(100),AK(100),AE(100),C3
	COMMON /SECVAR/ DATAX(315)
	COMMON /ASMVAR/ TDATA(523)
	COMMON /UTRIMD/ CNT(200),CMT(200),CAT(200),CYT(200),
     1                CLNT(200),CLLT(200)
C
	LOGICAL GO,NOEXEC,SAVE,IEND,LFLAGS,LDUMPF,LDELF,ITERM,LSOSE,
     1        PRESUR,LHYBRD,LHYPER,NOEXTR,NOLAT,PARTS,PARTC
C
	REAL INLTS
	INTEGER CASE
C
	DIMENSION IROUT(2),PARTC(19)
C
C      DATA IDCASE /74*4H    /
C      DATA NOEXTR /.TRUE./
C      DATA NOLAT  /.FALSE./
	DATA SAVE   /.FALSE./
	DATA IEND   /.FALSE./
	DATA ITERM  /.FALSE./
	DATA PARTC  /.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,
     1             .FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,
     2             .FALSE.,.FALSE.,.FALSE.,.FALSE.,.TRUE.,.TRUE.,
     3             .TRUE./
C
C***  OPEN STATEMENTS FOR VAX OR FORTRAN-77
C
	OPEN(UNIT=2, FILE='for002.dat', STATUS='UNKNOWN')
	OPEN(UNIT=3, FILE='for003.dat', STATUS='UNKNOWN')
	OPEN(UNIT=4, FILE='for004.dat', STATUS='UNKNOWN')
	OPEN(UNIT=5, FILE='for005.dat', STATUS='OLD')
        OPEN(UNIT=6, FILE='for006.dat', STATUS='UNKNOWN')
        OPEN(UNIT=7, FILE='for007.dat', STATUS='UNKNOWN')
        OPEN(UNIT=8, FILE='for008.dat', STATUS='UNKNOWN')
	OPEN(UNIT=9, FILE='for009.dat', STATUS='UNKNOWN')
        OPEN(UNIT=10, FILE='for010.dat', STATUS='UNKNOWN')
        OPEN(UNIT=11, FILE='for011.dat', STATUS='UNKNOWN')
        OPEN(UNIT=12, FILE='for012.dat', STATUS='UNKNOWN')
	LSOSE = .FALSE.
C
C*** HEADER FOR TECPLOT PLOT FILES
C
        WRITE(3,1100)
        WRITE(9,1110)
        WRITE(10,1120)
        WRITE(11,1130)
        WRITE(12,1140)
C
	DO 1000 I=1,19
	   PARTS(I)=PARTC(I)
 1000 CONTINUE
	DO 1005 I=1,100
	   NAMSV(I)=0
 1005 CONTINUE
C
	KOUNT=0
	CASE=0
	IR=0
	NOEXTR=.TRUE.
	NOLAT=.FALSE.
	DO 1001 I=1,74
	  IDCASE(I)='    '
 1001 CONTINUE
C
C ... PRE-PROCESS INPUTS THROUGH ERROR CHECKING
C
C     ASSUME ERROR CHECKING IS SUCCESSFUL
	GO=.TRUE.
	NOEXEC=.FALSE.
C
	CALL CONERR(GO,NOEXEC)
C
C   * IF THE CASE CANNOT RUN THEN STOP
	IF(.NOT. GO)GO TO 1030
C   * ENDIF
C
C ... LOOP UNTIL ALL CASES HAVE BEEN PROCESSED
C
 1010 CONTINUE
C
C  ...  ASSUME CASE WILL BE PROPERLY PROCESSED
C
	  GO=.TRUE.
C
C  ...  UPDATE CASE NUMBER
C
	  CASE=CASE+1
	  IPAGE=0
C
C  ...  INITIALIZE INFORMATION FOR THE CASE
C
	  CALL INITZ(CASE,SAVE)
C
	  DO 1020 I=1,16
	     PARTS(I)=PARTC(I)
 1020   CONTINUE
C
C  ...  READ A SET OF CASE DATA
C
	  CALL READIN(GO,SAVE,IEND,ITERM)
C
C     * IF NO MORE DATA READ, TERMINATE EXECUTION
	  IF(ITERM)GO TO 1030
C     * ENDIF
C
	  IF(GO .AND. NOEXEC)WRITE(6,1040)
C
C     * IF A CASE CAN NOT BE EXECUTED
C     . THEN READ NEXT CASE DATA
	  IF(.NOT.GO)GO TO 1010
C     . ELSE COMPUTE GEOMETRY AND AERODYNAMICS
C     * ENDIF
C
C ...   DO NOT EXECUTE IF USER HAS SPECIFIED NOGO
C
	  IF(NOEXEC)GO TO 1010
C
C  ...  CALCULATE GEOMETRIC VARIABLES REQUIRED
C
	  CALL GEOM
C
C  ...  CALCULATE AERODYNAMICS
C
	  CALL AERO
C
C  ...  OUTPUT EXTRAPOLATION MESSAGES (IF ANY) GENERATED
C
C         CALL EXTRAP
C
C  ...  BEGIN NEXT CASE
C
	  GO TO 1010
C
C  ...  TERMINATE EXECUTION
C
 1030   CONTINUE
 1040  FORMAT(4X,'THE NOGO CONTROL CARD HAS BEEN USED.',/,
     1         4X,'EXECUTION OF THIS CASE WILL NOT BE ATTEMPTED.'/)
 1100  FORMAT('VARIABLES=ALPHA,CN,CM,CA,CY,CLN,CLL,DELTA,CL,CD')
 1110  FORMAT('VARIABLES=X,R')
 1120  FORMAT('VARIABLES=X/D,CP(0),CP(30),CP(60),CP(90),CP(120),',
     1        'CP(150),CP(180)')
 1130  FORMAT('VARIABLES=Y/(B/2),X/C,CP')
 1140  FORMAT('VARIABLES=X/D,CP,MACH')
C
	CLOSE(2,STATUS='DELETE')
	CLOSE(3,STATUS='KEEP')
	CLOSE(4,STATUS='KEEP')
	CLOSE(5,STATUS='KEEP')
        CLOSE(6,STATUS='KEEP')
	CLOSE(7,STATUS='DELETE')
	CLOSE(8,STATUS='DELETE')
	CLOSE(9,STATUS='KEEP')
	CLOSE(10,STATUS='KEEP')
	CLOSE(11,STATUS='KEEP')
	CLOSE(12,STATUS='KEEP')
	STOP
	END
